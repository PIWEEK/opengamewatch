[gd_scene load_steps=11 format=2]

[ext_resource path="res://res/jpg/cementfactorylow.jpg" type="Texture" id=1]
[ext_resource path="res://res/jpg/carmelita.jpg" type="Texture" id=2]
[ext_resource path="res://res/jpg/electronika.jpg" type="Texture" id=3]
[ext_resource path="res://res/png/art.png" type="Texture" id=4]
[ext_resource path="res://res/snd/astronautmove.wav" type="AudioStream" id=5]
[ext_resource path="res://res/snd/death.wav" type="AudioStream" id=6]
[ext_resource path="res://res/snd/bonuspoint.wav" type="AudioStream" id=7]
[ext_resource path="res://Miss.tscn" type="PackedScene" id=8]
[ext_resource path="res://Time.tscn" type="PackedScene" id=9]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"
const ASTRO_SPEED = 100

var dude
var meteor1
var meteor2
var meteor3
var meteor4
var meteor5
var t
var Columb

var m1_scene
var m2_scene
var m3_scene
var m4_scene
var m5_scene
var dude_scene
var houston_scene
var base_scene
var flag_scene
var columbia_scene

var flag_coord
var flag_is_taken

var show_base = false
var show_all_bases = false

var scoretest = 0

# Called when the node enters the scene tree for the first time.

func blank():
	var t = Timer.new() 		# Create a new Timer node
	t.set_wait_time(2) 		# Set the wait time
	add_child(t)			# Add it to the node tree as the direct child
	t.start()
	yield(t, \"timeout\")		# Finally, make the script stop with the yield
	
	scoretest+=1000
	print(scoretest)	
	get_tree().reload_current_scene()

func clear():
	var t = Timer.new() 		# Create a new Timer node
	t.set_wait_time(1) 		# Set the wait time
	add_child(t)			# Add it to the node tree as the direct child
	t.start()
	yield(t, \"timeout\")		# Finally, make the script stop with the yield
	
	#remove_child(m1_scene)
	remove_child(m2_scene)
	#remove_child(m3_scene)
	remove_child(m4_scene)
	remove_child(m5_scene)
	remove_child(dude_scene)
	remove_child(base_scene)
	remove_child(houston_scene)
	remove_child(columbia_scene)
	scoretest+=1000
	print(scoretest)	
	endgame = false
	startgame()

func startgame():
	
	#meteor1 = get_node(\"Meteor01\")
	meteor2 = get_node(\"Meteor02\")
	#meteor3 = get_node(\"Meteor03\")
	meteor4 = get_node(\"Meteor04\")
	meteor5 = get_node(\"Meteor05\")
	
#	m1_scene = load(\"res://Meteor01.tscn\").instance()
#	m1_scene.position.x = 330
#	m1_scene.position.y = 236
#	add_child(m1_scene)

	m2_scene = load(\"res://Meteor02.tscn\").instance()
	m2_scene.position.x = 336
	m2_scene.position.y = 285
	add_child(m2_scene)
	
#	m3_scene = load(\"res://Meteor03.tscn\").instance()
#	m3_scene.position.x = 324
#	m3_scene.position.y = 340
#	add_child(m3_scene)

	m4_scene = load(\"res://Meteor04.tscn\").instance()
	m4_scene.position.x = 367
	m4_scene.position.y = 401
	add_child(m4_scene)

	m5_scene = load(\"res://Meteor05.tscn\").instance()
	m5_scene.position.x = 340
	m5_scene.position.y = 435
	add_child(m5_scene)

	columbia_scene = load(\"res://Columbia.tscn\").instance()
	columbia_scene.position.x = 350
	columbia_scene.position.y = 185
	add_child(columbia_scene)	
	#load_dude()
	
	dude_scene = load(\"res://Dude.tscn\").instance()
	dude_scene.position.x = 350
	dude_scene.position.y = 210
	dude_scene.parent = self
	add_child(dude_scene)

	houston_scene = load(\"res://Houston.tscn\").instance()
	houston_scene.position.x = 872
	houston_scene.position.y = 345
	add_child(houston_scene)
	
	base_scene = load(\"res://Base.tscn\").instance()
	base_scene.position.x = 470
	base_scene.position.y = 494
	add_child(base_scene)

#	flag_scene = load(\"res://Flag.tscn\").instance()
#	flag_scene.position.x = 425
#	flag_scene.position.y = 460
#	add_child(flag_scene)


func _ready():
	startgame()


func meteor_kills_dude(dudepos, listofmeteorpos):
	for mpos in listofmeteorpos:
		if dudepos == mpos:
			return true
	return false


func is_time_to_show_base(delta):
	if show_base:
		houston_scene.action(delta)
		return true

var currentdudepos = [0,0]

var number_of_misses = 0
var endgame = false
#
#const DUDE_SCENE = preload(\"res://Dude.tscn\")
#
#func load_dude():
#	var new_dude_scene = DUDE_SCENE.instance()
#	new_dude_scene.position.x = 346
#	new_dude_scene.position.y = 200
#    #Must have unique nodepath
#    #Might be done automatically, but just in case
#	new_dude_scene.set_name(\"Dude\")
#	add_child(new_dude_scene)

var dead = false

func is_dead_by_fall(delta):
	var dude_is_dead_by_fall = get_node(\"Dude\").get(\"dude_is_dead_by_fall\")
	return dude_is_dead_by_fall

func show_dead_by_meteor(delta):
			
	get_node(\"dead\").play()

	var t = Timer.new() 		# Create a new Timer node
	t.set_wait_time(3) 		# Set the wait time
	add_child(t)			# Add it to the node tree as the direct child
	t.start()			# Start it
	yield(t, \"timeout\")		# Finally, make the script stop with the yield

func show_dead_by_fall(delta):
	
	m2_scene.pause(delta)
	m4_scene.pause(delta)
	m5_scene.pause(delta)
	var dead = load(\"res://Dead.tscn\").instance()
	dead.position.x = 350
	dead.position.y = 465
	add_child(dead)
	get_node(\"dead\").play()
	t = Timer.new() 		# Create a new Timer node
	t.set_wait_time(3) 		# Set the wait time
	add_child(t)			# Add it to the node tree as the direct child
	t.start()
	yield(t, \"timeout\")		# Finally, make the script stop with the yield
	remove_child(dead)
	

		

func is_dead_by_meteor(delta):
	
	currentdudepos = get_node(\"Dude\").get(\"startpos\")
	#var meteor1pos = get_node(\"Meteor01\").get(\"pos\")
	var meteor2pos = get_node(\"Meteor02\").get(\"pos\")
	#var meteor3pos = get_node(\"Meteor03\").get(\"pos\")
	var meteor4pos = get_node(\"Meteor04\").get(\"pos\")
	var meteor5pos = get_node(\"Meteor05\").get(\"pos\")

	var listofmeteorpos = [meteor2pos, meteor4pos, meteor5pos]

#	var listofmeteorpos = [meteor1pos, meteor2pos, meteor3pos, meteor4pos, meteor5pos]
	if meteor_kills_dude(currentdudepos, listofmeteorpos):
		dude_scene.pause(delta)
		m2_scene.pause(delta)
		m4_scene.pause(delta)
		m5_scene.pause(delta)
		return true
	return false

var min_time_for_houston = 3
var time_for_houston = 0

func is_time_for_houston(delta):
	
	if not dude_scene.dude_can_walk_moon:
		time_for_houston += delta
		if time_for_houston > min_time_for_houston: 
			return true
	return false
	
func is_time_for_base(delta):
	pass
	
func is_time_for_flag(delta):
	if dude_scene.startpos == dude_scene.moon_base_coord:
		return true
	
func is_flag_taken(delta):
	return flag_is_taken


func animate_endgame(delta):
	pass
	
func play_endgame(delta):
	pass

func allow_extra_action_houston(delta):
	get_node(\"Dude\").set(\"dude_can_call_houston\",true)
	
	
func disable_extra_action_houston(delta):
	get_node(\"Dude\").set(\"dude_can_call_houston\",false)


func allow_extra_action_base(delta):
	pass
	
func allow_extra_action_bases(delta):
	pass

func allow_extra_action_allbase(delta):
	pass

func allow_extra_action_flag(delta):
	pass

func play_flag_taken(delta):
	pass

var score = 0

func add_score(points, delta):
	score += points

var deadwait = 0
var maxdeadwait = 3

func _process(delta):
	
	
	if not endgame:
		if is_dead_by_fall(delta):
			show_dead_by_fall(delta)
			endgame = true
			var t = Timer.new() 		# Create a new Timer node
			t.set_wait_time(3) 		# Set the wait time
			add_child(t)			# Add it to the node tree as the direct child
			t.start()
			yield(t, \"timeout\")		# Finally, make the script stop with the yield

				
		elif is_dead_by_meteor(delta):
			show_dead_by_meteor(delta)
			endgame = true
			var t = Timer.new()
			t.set_wait_time(3) 		# Set the wait time
			add_child(t)			# Add it to the node tree as the direct child
			t.start()
			yield(t, \"timeout\")		# Finally, make the script stop with the yield
			
		if is_time_for_houston(delta):
			houston_scene.visible(delta)
			allow_extra_action_houston(delta)

		if is_time_to_show_base(delta):
			disable_extra_action_houston(delta)
			var c = base_scene.generate_base()
			show_base = false
			if not dude_scene.legal_coord_sprites.find(c) > -1:
				dude_scene.legal_coord_sprites.append(c)
				dude_scene.touchdown(c)
#			allow_extra_action_base(delta)
#			add_score(20, delta)
#
		if is_time_for_flag(delta):
			var coords = base_scene.generate_all_bases()
			flag_coord = base_scene.make_flag_appear()
			dude_scene.legal_coord_sprites += coords
#			flag_scene.show(delta)
#			base_scene.showall(delta)
#			allow_extra_action_bases(delta)
#			allow_extra_action_flag(delta)
#			add_score(20, delta)
#
		if is_flag_taken(delta):
			get_node(\"win\").play()
			base_scene.set(\"blink\",false)
			var t = Timer.new() 		# Create a new Timer node
			t.set_wait_time(1) 		# Set the wait time
			add_child(t)			# Add it to the node tree as the direct child
			t.start()			# Start it
			yield(t, \"timeout\")		# Finally, make the script stop with the yield
			endgame = true
	else:
		blank()


func columbanim(columb_unidad, delay, offset, right):

	var t = Timer.new() 		# Create a new Timer node
	t.set_wait_time(delay+offset) 		# Set the wait time
	add_child(t)			# Add it to the node tree as the direct child

	var tend = Timer.new() 		# Create a new Timer node
	tend.set_wait_time(delay*3) 		# Set the wait time
	add_child(tend)			# Add it to the node tree as the direct child

	var c_children = columb_unidad.get_children()
	if not right:
		c_children.invert()

	while true:
		for child in c_children:
			child.visible = true
			t.start()			# Start it
			yield(t, \"timeout\")		# Finally, make the script stop with the yield
			child.visible = false
		tend.start()			# Start it
		yield(tend, \"timeout\")		# Finally, make the script stop with the yield"

[node name="Main" type="Node2D"]
script = SubResource( 1 )

[node name="cement" type="TextureRect" parent="."]
visible = false
margin_left = 2.3241
margin_right = 1282.32
margin_bottom = 768.0
texture = ExtResource( 1 )

[node name="carmelita" type="TextureRect" parent="."]
margin_left = 2.3241
margin_right = 1282.32
margin_bottom = 768.0
texture = ExtResource( 2 )

[node name="electronika" type="TextureRect" parent="."]
visible = false
margin_left = 2.0
margin_right = 1282.0
margin_bottom = 769.0
texture = ExtResource( 3 )

[node name="Art" type="Sprite" parent="."]
position = Vector2( 646.148, 374.122 )
scale = Vector2( 0.785292, 0.785292 )
z_index = 1
texture = ExtResource( 4 )

[node name="move" type="AudioStreamPlayer2D" parent="."]
visible = false
stream = ExtResource( 5 )

[node name="dead" type="AudioStreamPlayer2D" parent="."]
visible = false
stream = ExtResource( 6 )

[node name="win" type="AudioStreamPlayer2D" parent="."]
visible = false
stream = ExtResource( 7 )

[node name="Miss" parent="." instance=ExtResource( 8 )]
position = Vector2( 765, 532 )
z_index = 1

[node name="Time" parent="." instance=ExtResource( 9 )]
position = Vector2( 548, 522 )
z_index = 1
